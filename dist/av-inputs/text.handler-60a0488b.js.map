{"file":"text.handler-60a0488b.js","mappings":"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","names":[],"sources":["src/utils/text.handler.ts"],"sourcesContent":["import { InputScanData } from \"src/components\";\nimport { InputScanDataPersona, InputScanType } from \"src/components/input-scan-reader/input-scan-reader.types\";\n\n\n\nconst regexToData = [\n    {\n      regex: /^([a-z0-9]+)$/gi, \n      type: InputScanType.ALFANUMERICO\n    },\n    {\n      regex: /^([0-9]+)$/gi, \n      type: InputScanType.NUMBER\n    },\n    {\n      regex:  /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/gi, \n      type: InputScanType.URL\n    },\n    {\n      regex: /^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/gi, \n      type: InputScanType.EMAIL\n    },\n  ]\n\n\n\nfunction getDataFromDNIv1 (inputScanner: RegExpExecArray, scannedText: string): InputScanDataPersona {\n\n    return {\n      type: InputScanType.DNIv1,\n      text: scannedText,\n      data:  {\n        apellido: inputScanner[4],\n        nombre: inputScanner[5],\n        dni: inputScanner[1],\n        fecha_nacimiento: inputScanner[6],\n        sexo: inputScanner[7],\n      }\n    }\n  }\n\n\nfunction runRegex( text:string): InputScanData {\n    let regex,regrun\n      // DNI v1\n      // \"30368326    \"A\"1\"VILAR\"ALEJANDRO ERNESTO\"ARGENTINA\"07-06-1983\"M\"13-02-2011\"00038329892\"7019 \"13-02-2026\"616\"0\"ILRÑ2.01 CÑ110128.02 )No Cap.=\"UNIDADÑ DG200 Plus ÇÇ SERIE NMEROÑ ¡040:2009::0019\"\n      regex = /^\\\"?(\\w{8}) +\\\"?([a-z])\\\"?(\\w)\\\"?([a-z ]+)\\\"?([a-z ]+)\\\"?([a-z]+)\\\"?([0-9-]+)\\\"?([a-z])\"/gi\n      regrun = regex.exec( text )\n      if ( regrun ) {\n        return getDataFromDNIv1(regrun,  text ) as InputScanDataPersona;\n      }\n\n      // DNI v2\n      regex = /^\\\"?(\\d+)\\\"?([a-z ]+)\\\"?([a-z ]+)\\\"?([a-z])\\\"?(\\w{8})\\\"?([a-z])\\\"?([0-9-]+)/gi\n      regrun = regex.exec( text )\n      if ( regrun ) {\n        return getDataFromDNIv2(regrun,  text ) as InputScanDataPersona;\n      }\n\n\n      // Licencia de conducir\n      regex = /^\\\"?(\\w{8})\\\"?([a-z])\\\"?([a-z ]+)\\\"?([a-z ]+)\\\"?([a-z]+)\\\"?([0-9-]+)\\\"?([a-z])\\\"?([0-9-]+)/gi\n      regrun = regex.exec( text )\n      if ( regrun ) {\n        return getDataFromLicenciaDeCOnducir( text ) as InputScanDataPersona;\n      }\n\n      for ( let i = 0; i < regexToData.length; i++ ) {\n        const regexToDataItem = regexToData[i];\n        const regrun = regexToDataItem.regex.exec( text )\n        if ( regrun ) {\n          return getDataFromRegex(regexToDataItem.type, text );\n        }\n      }\n  }\n\n\nfunction getDataFromRegex (type: InputScanType, scannedText: string): InputScanData {\n  return {\n    type: type,\n    text: scannedText,\n    }\n}\n\nfunction getDataFromLicenciaDeCOnducir (scannedText: string): InputScanData {\n  return getDataFromRegex(InputScanType.LICENCIA_CONDUCIR, scannedText)   \n}\n\n\n\nfunction getDataFromDNIv2 (inputScanner: RegExpExecArray, scannedText: string): InputScanDataPersona {\n       \n    return {\n      type: InputScanType.DNIv2,\n      text: scannedText,\n      data:  {\n        apellido: inputScanner[2],\n        nombre: inputScanner[3],\n        dni: inputScanner[5],\n        fecha_nacimiento: inputScanner[7],\n        sexo: inputScanner[4],\n      }\n    }\n  }\n\n\n\n\nexport function processText(text: string): InputScanData {\n    const scannedData = runRegex( text )\n\n    let data;\n    if ( scannedData ) {\n      data = scannedData;\n    } else {\n      data = {\n        type: InputScanType.DESCONOCIDO,\n        text: text,\n        data:  {\n          text: text,\n        }\n      }\n    }\n\n    return data;\n  }"],"version":3}