{"version":3,"names":["inputScanReaderCss","InputScanReader","constructor","hostRef","this","reading","readingEnabled","modalTimer","scanTitle","scannedText","displayModal","data","parent","el","parentNode","div","document","createElement","style","position","top","left","width","height","backgroundColor","zIndex","display","alignItems","justifyContent","color","fontSize","fontWeight","textAlign","padding","boxSizing","borderRadius","overflow","textOverflow","whiteSpace","cursor","textContent","text","addEventListener","remove","appendChild","setTimeout","handleScan","event","detail","componentDidLoad","start","onEnterHandler","scannedData","processText","scan","emit","watchScannedTextHandler","newValue","length","restartOnTimeout","clearTimeout","timeout","getText","getData","reset","ms","onKeydownHandler","isComposing","code","key","slice","ctrlKey","metaKey","altKey","handleKeyDown","ev","stop","handleOnInpujtChangeEvent","target","value","spanLoader","h","class","render","mainClass","Host","type","onChange"],"sources":["src/components/input-scan-reader/input-scan-reader.css?tag=input-scan-reader&encapsulation=shadow","src/components/input-scan-reader/input-scan-reader.tsx"],"sourcesContent":[":host {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  --main-color: SlateBlue;\n  --scanned-text-color: crimson;\n  --stopped-color: grey;\n  text-align: center;\n}\n\n.stopped label{\n  color: var(--stopped-color);\n}\n\n.stopped .loader::after,\n.stopped .loader::before {\n  border-color: var(--stopped-color);\n\n}\n\n\n.scanning  label {\n    animation: blinker 2s linear 1s infinite;\n}\n\n.scanning .loader::after,\n.scanning .loader::before {\n  animation: animloader 2s linear infinite;\n}\n\ninput {\n  display: none;\n}\n\n.scanned-text {\n  font-size: 1.5rem;\n  color: var(--scanned-text-color);\n  margin: 0;\n  text-wrap: nowrap;\n  height: 1.5rem;\n}\n\nlabel {\n  display: block;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n  color: var(--main-color);\n  font-weight: bold;\n}\n\nlabel:hover {\n  background-color: #f1f1f1;\n}\n\nlabel:active {\n  background-color: #e1e1e1;\n}\n\n.loader {\n  width: 48px;\n  height: 48px;\n  display: inline-block;\n  position: relative;\n}\n.loader::after,\n.loader::before {\n  content: '';\n  box-sizing: border-box;\n  width: 48px;\n  height: 48px;\n  border-radius: 50%;\n  border: 2px solid;\n  border-color: var(--main-color);\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n.loader::after {\n  animation-delay: 1s;\n}\n\n@keyframes animloader {\n  0% {\n    transform: scale(0);\n    opacity: 1;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 0;\n  }\n}\n\n@keyframes blinker {\n  50% {\n    opacity: 0.5;\n  }\n}\n","import { Component, Host, h, Event, Method, Element, EventEmitter, State, Listen, Prop, Watch } from '@stencil/core';\nimport { InputScanData } from './input-scan-reader.types';\nimport { processText } from 'src/utils/text.handler';\n\n// DNI EXAMPLES\n// \"17572896    \"A\"1\"CABRA\"LEONARDO ANTONIO FABIO\"ARGENTINA\"26-08-1965\"M\"08-08-2011\"00057696015\"5    \"08-08-2026\"31\"0\"ILRÑ2.01 CÑ110613.02 )No Cap.=\"UNIDAD ·05 ÇÇ S-NÑ 0040:2008::0005\n// 00691556286\"CANO\"JONATHAN LEONARDO\"M\"33951134\"C\"08-08-1988\"17-07-2022\"239\n// 00395738312\"TASSISTRO\"FLORENCIA ANTONELLA\"F\"41195367\"A\"20-06-1998\"30-08-2015\"275\n// 00115714043\"PIUMATO\"ANDRES JUAN\"M\"38305357\"B\"04-05-1994\"05-06-2012\n\n@Component({\n  tag: 'input-scan-reader',\n  styleUrl: 'input-scan-reader.css',\n  shadow: true,\n})\nexport class InputScanReader {\n  @Element() el: HTMLElement;\n\n  @State() reading = false;\n\n  @State() readingEnabled = false;\n\n  /**\n   * Show a modal with the scanned text. like a white blink on the screen\n   */\n  @Prop() modalTimer?: number = 0;\n\n  @Prop() scanTitle?: string = 'Scanning Text';\n\n  displayModal(data: InputScanData) {\n    // crear un elemento tipo DIV del tamaño del parentNode de this.el\n\n    const parent = this.el.parentNode;\n\n    const div = document.createElement('div');\n    div.style.position = 'fixed';\n    div.style.top = '0';\n    div.style.left = '0';\n    div.style.width = '100vw';\n    div.style.height = '100vh';\n    div.style.backgroundColor = 'rgba(254,254,254,0.65)';\n    div.style.zIndex = '1000';\n    div.style.display = 'flex';\n    div.style.alignItems = 'center';\n    div.style.justifyContent = 'center';\n    div.style.color = 'black';\n    div.style.fontSize = '3rem';\n    div.style.fontWeight = 'bold';\n    div.style.textAlign = 'center';\n    div.style.padding = '1rem';\n    div.style.boxSizing = 'border-box';\n    div.style.borderRadius = '1rem';\n    div.style.overflow = 'hidden';\n    div.style.textOverflow = 'ellipsis';\n    div.style.whiteSpace = 'nowrap';\n    div.style.cursor = 'pointer';\n    div.textContent = data.text;\n    div.addEventListener('click', () => {\n      div.remove();\n    });\n    parent.appendChild(div);\n    setTimeout(() => {\n      div.remove();\n    }, this.modalTimer);\n  }\n\n  @Listen('scan')\n  handleScan(event: CustomEvent<InputScanData>) {\n    if (this.modalTimer > 0) {\n      this.displayModal(event.detail);\n    }\n\n    // reinicializo texto\n    this.scannedText = '';\n  }\n\n  componentDidLoad() {\n    if (!this.readingEnabled) {\n      this.start();\n    }\n  }\n\n  onEnterHandler() {\n    if (this.scannedText == '') {\n      return false;\n    }\n\n    // convierto el texto a InputScanData\n    const scannedData = processText(this.scannedText);\n\n    // emit the scanned data and reset the scannedText\n    this.scan.emit(scannedData);\n  }\n\n  @State() scannedText = '';\n\n  @Watch('scannedText')\n  watchScannedTextHandler(newValue: string) {\n    if (newValue.length > 0) {\n      this.restartOnTimeout();\n    } else {\n      clearTimeout(this.timeout);\n    }\n  }\n\n  /**\n   * Fired when the user press enter or tab\n   * used with scanners like BARCODES or QR\n   */\n  @Event() scan: EventEmitter<InputScanData>;\n\n  /**\n   * get raw scanned text\n   * @returns the text scanned\n   */\n  @Method()\n  async getText(): Promise<string> {\n    return this.scannedText;\n  }\n\n  /**\n   * Structured scanned text\n   * @returns the text scanned\n   */\n  @Method()\n  async getData(): Promise<InputScanData> {\n    if (this.scannedText == '') {\n      return null;\n    }\n\n    return processText(this.scannedText);\n  }\n\n  reset() {\n    this.scannedText = '';\n    this.readingEnabled = false;\n  }\n\n  @State() timeout: NodeJS.Timeout;\n\n  restartOnTimeout(ms = 5000) {\n    clearTimeout(this.timeout);\n\n    this.timeout = setTimeout(() => {\n      this.reset();\n    }, ms);\n  }\n\n  onKeydownHandler(event: KeyboardEvent) {\n    if ( this.readingEnabled === false ) {\n      return;\n    }\n\n    if (event.isComposing) {\n      return;\n    }\n    if (event.code == 'Enter' || event.code == 'NumpadEnter' || event.code == 'Tab') {\n      return this.onEnterHandler();\n    }\n\n    if (event.key == 'Shift' || event.key == 'Control' || event.key == 'Alt' || event.key == 'AltGraph' || event.key == 'Meta') {\n      return;\n    }\n\n    if (event.key == 'Backspace') {\n      this.scannedText = this.scannedText.slice(0, -1);\n      return;\n    }\n\n    if (event.key == 'Escape') {\n      this.scannedText = '';\n      return;\n    }\n\n    if (event.key == ' ') {\n      this.scannedText += ' ';\n      return;\n    }\n\n    if (event.key == 'CapsLock') {\n      return;\n    }\n\n    // Ignore control characters\n    if (event.key.length === 1 && !event.ctrlKey && !event.metaKey && !event.altKey) {\n      this.scannedText += event.key;\n    }\n  }\n\n   @Listen('keydown', { target: 'document' })\n  handleKeyDown(ev: KeyboardEvent) {\n    if (this.readingEnabled) {\n      this.onKeydownHandler(ev);\n    }\n  }\n\n\n  @Method()\n  async start() {\n    // listen on document for keydown and write text in scannedText\n    this.readingEnabled = true;\n  }\n\n  @Method()\n  async stop() {\n    this.readingEnabled = false;\n  }\n\n  handleOnInpujtChangeEvent(ev: Event) {\n    this.scannedText = (ev.target as HTMLInputElement).value;\n  }\n\n  spanLoader() {\n    return <span class=\"loader\"></span>;\n  }\n\n  render() {\n    let mainClass = this.readingEnabled ? '' : 'stopped';\n    if ( this.readingEnabled ) {\n      if ( this.scannedText.length === 0 ) {\n        mainClass += ' scanning';\n      } else {\n        mainClass += ' reading';\n      }\n    }\n\n    return (\n      <Host>\n        <div class={mainClass }>\n          <div>{this.spanLoader()}</div>\n          {this.scanTitle && <label>{this.scanTitle}</label>}\n          <div class=\"scanned-text\">{this.scannedText}</div>\n          <input type=\"text\" value={this.scannedText} onChange={ev => this.handleOnInpujtChangeEvent(ev)} />\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"oGAAA,MAAMA,EAAqB,+mC,MCedC,EAAe,MAL5B,WAAAC,CAAAC,G,qCAQWC,KAAOC,QAAG,MAEVD,KAAcE,eAAG,MAKlBF,KAAUG,WAAY,EAEtBH,KAASI,UAAY,gBAmEpBJ,KAAWK,YAAG,EA+IxB,CAhNC,YAAAC,CAAaC,GAGX,MAAMC,EAASR,KAAKS,GAAGC,WAEvB,MAAMC,EAAMC,SAASC,cAAc,OACnCF,EAAIG,MAAMC,SAAW,QACrBJ,EAAIG,MAAME,IAAM,IAChBL,EAAIG,MAAMG,KAAO,IACjBN,EAAIG,MAAMI,MAAQ,QAClBP,EAAIG,MAAMK,OAAS,QACnBR,EAAIG,MAAMM,gBAAkB,yBAC5BT,EAAIG,MAAMO,OAAS,OACnBV,EAAIG,MAAMQ,QAAU,OACpBX,EAAIG,MAAMS,WAAa,SACvBZ,EAAIG,MAAMU,eAAiB,SAC3Bb,EAAIG,MAAMW,MAAQ,QAClBd,EAAIG,MAAMY,SAAW,OACrBf,EAAIG,MAAMa,WAAa,OACvBhB,EAAIG,MAAMc,UAAY,SACtBjB,EAAIG,MAAMe,QAAU,OACpBlB,EAAIG,MAAMgB,UAAY,aACtBnB,EAAIG,MAAMiB,aAAe,OACzBpB,EAAIG,MAAMkB,SAAW,SACrBrB,EAAIG,MAAMmB,aAAe,WACzBtB,EAAIG,MAAMoB,WAAa,SACvBvB,EAAIG,MAAMqB,OAAS,UACnBxB,EAAIyB,YAAc7B,EAAK8B,KACvB1B,EAAI2B,iBAAiB,SAAS,KAC5B3B,EAAI4B,QAAQ,IAEd/B,EAAOgC,YAAY7B,GACnB8B,YAAW,KACT9B,EAAI4B,QAAQ,GACXvC,KAAKG,W,CAIV,UAAAuC,CAAWC,GACT,GAAI3C,KAAKG,WAAa,EAAG,CACvBH,KAAKM,aAAaqC,EAAMC,O,CAI1B5C,KAAKK,YAAc,E,CAGrB,gBAAAwC,GACE,IAAK7C,KAAKE,eAAgB,CACxBF,KAAK8C,O,EAIT,cAAAC,GACE,GAAI/C,KAAKK,aAAe,GAAI,CAC1B,OAAO,K,CAIT,MAAM2C,EAAcC,EAAYjD,KAAKK,aAGrCL,KAAKkD,KAAKC,KAAKH,E,CAMjB,uBAAAI,CAAwBC,GACtB,GAAIA,EAASC,OAAS,EAAG,CACvBtD,KAAKuD,kB,KACA,CACLC,aAAaxD,KAAKyD,Q,EAetB,aAAMC,GACJ,OAAO1D,KAAKK,W,CAQd,aAAMsD,GACJ,GAAI3D,KAAKK,aAAe,GAAI,CAC1B,OAAO,I,CAGT,OAAO4C,EAAYjD,KAAKK,Y,CAG1B,KAAAuD,GACE5D,KAAKK,YAAc,GACnBL,KAAKE,eAAiB,K,CAKxB,gBAAAqD,CAAiBM,EAAK,KACpBL,aAAaxD,KAAKyD,SAElBzD,KAAKyD,QAAUhB,YAAW,KACxBzC,KAAK4D,OAAO,GACXC,E,CAGL,gBAAAC,CAAiBnB,GACf,GAAK3C,KAAKE,iBAAmB,MAAQ,CACnC,M,CAGF,GAAIyC,EAAMoB,YAAa,CACrB,M,CAEF,GAAIpB,EAAMqB,MAAQ,SAAWrB,EAAMqB,MAAQ,eAAiBrB,EAAMqB,MAAQ,MAAO,CAC/E,OAAOhE,KAAK+C,gB,CAGd,GAAIJ,EAAMsB,KAAO,SAAWtB,EAAMsB,KAAO,WAAatB,EAAMsB,KAAO,OAAStB,EAAMsB,KAAO,YAActB,EAAMsB,KAAO,OAAQ,CAC1H,M,CAGF,GAAItB,EAAMsB,KAAO,YAAa,CAC5BjE,KAAKK,YAAcL,KAAKK,YAAY6D,MAAM,GAAG,GAC7C,M,CAGF,GAAIvB,EAAMsB,KAAO,SAAU,CACzBjE,KAAKK,YAAc,GACnB,M,CAGF,GAAIsC,EAAMsB,KAAO,IAAK,CACpBjE,KAAKK,aAAe,IACpB,M,CAGF,GAAIsC,EAAMsB,KAAO,WAAY,CAC3B,M,CAIF,GAAItB,EAAMsB,IAAIX,SAAW,IAAMX,EAAMwB,UAAYxB,EAAMyB,UAAYzB,EAAM0B,OAAQ,CAC/ErE,KAAKK,aAAesC,EAAMsB,G,EAK9B,aAAAK,CAAcC,GACZ,GAAIvE,KAAKE,eAAgB,CACvBF,KAAK8D,iBAAiBS,E,EAM1B,WAAMzB,GAEJ9C,KAAKE,eAAiB,I,CAIxB,UAAMsE,GACJxE,KAAKE,eAAiB,K,CAGxB,yBAAAuE,CAA0BF,GACxBvE,KAAKK,YAAekE,EAAGG,OAA4BC,K,CAGrD,UAAAC,GACE,OAAOC,EAAM,QAAAC,MAAM,U,CAGrB,MAAAC,GACE,IAAIC,EAAYhF,KAAKE,eAAiB,GAAK,UAC3C,GAAKF,KAAKE,eAAiB,CACzB,GAAKF,KAAKK,YAAYiD,SAAW,EAAI,CACnC0B,GAAa,W,KACR,CACLA,GAAa,U,EAIjB,OACEH,EAACI,EAAI,CAAAhB,IAAA,4CACHY,EAAK,OAAAZ,IAAA,2CAAAa,MAAOE,GACVH,EAAA,OAAAZ,IAAA,4CAAMjE,KAAK4E,cACV5E,KAAKI,WAAayE,EAAA,SAAAZ,IAAA,4CAAQjE,KAAKI,WAChCyE,EAAA,OAAAZ,IAAA,2CAAKa,MAAM,gBAAgB9E,KAAKK,aAChCwE,EAAO,SAAAZ,IAAA,2CAAAiB,KAAK,OAAOP,MAAO3E,KAAKK,YAAa8E,SAAUZ,GAAMvE,KAAKyE,0BAA0BF,M","ignoreList":[]}