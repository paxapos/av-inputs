{"version":3,"names":["inputScanReaderCss","InputScanReader","this","regexToData","regex","type","handleScan","event","modalTimer","parent","el","parentNode","div","document","createElement","style","position","top","left","width","height","backgroundColor","zIndex","display","alignItems","justifyContent","color","fontSize","fontWeight","textAlign","padding","boxSizing","borderRadius","overflow","textOverflow","whiteSpace","cursor","textContent","detail","text","addEventListener","remove","appendChild","setTimeout","processText","scannedData","runRegex","data","scannedText","onEnterHandler","scan","emit","handleKeyDown","isComposing","code","key","slice","async","regrun","exec","getDataFromDNIv1","getDataFromDNIv2","getDataFromLicenciaDeCOnducir","i","length","regexToDataItem","getDataFromRegex","inputScanner","apellido","nombre","dni","fecha_nacimiento","sexo","handleOnInpujtChangeEvent","ev","target","value","render","h","Host","onChange"],"sources":["src/components/input-scan-reader/input-scan-reader.css?tag=input-scan-reader&encapsulation=shadow","src/components/input-scan-reader/input-scan-reader.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, h, Event, Method, Element, EventEmitter, State, Listen, Prop } from '@stencil/core';\nimport { InputScanData, InputScanType } from './input-scan-reader.types';\n\n\n\n\n// DNI EXAMPLES\n// \"17572896    \"A\"1\"CABRA\"LEONARDO ANTONIO FABIO\"ARGENTINA\"26-08-1965\"M\"08-08-2011\"00057696015\"5    \"08-08-2026\"31\"0\"ILRÑ2.01 CÑ110613.02 )No Cap.=\"UNIDAD ·05 ÇÇ S-NÑ 0040:2008::0005\n// 00691556286\"CANO\"JONATHAN LEONARDO\"M\"33951134\"C\"08-08-1988\"17-07-2022\"239\n// 00395738312\"TASSISTRO\"FLORENCIA ANTONELLA\"F\"41195367\"A\"20-06-1998\"30-08-2015\"275\n// 00115714043\"PIUMATO\"ANDRES JUAN\"M\"38305357\"B\"04-05-1994\"05-06-2012\n\n\n\n@Component({\n  tag: 'input-scan-reader',\n  styleUrl: 'input-scan-reader.css',\n  shadow: true,\n})\nexport class InputScanReader {\n\n  regexToData = [\n    {\n      regex: /^([a-z0-9]+)$/gi, \n      type: InputScanType.ALFANUMERICO\n    },\n    {\n      regex: /^([0-9]+)$/gi, \n      type: InputScanType.NUMBER\n    },\n    {\n      regex:  /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/gi, \n      type: InputScanType.URL\n    },\n    {\n      regex: /^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/gi, \n      type: InputScanType.EMAIL\n    },\n  ]\n\n\n  @Element() el: HTMLElement;\n  \n  /**\n   * Show a modal with the scanned text. like a white blink on the screen\n   */\n  @Prop() modalTimer?: number = 500;\n\n  @Listen('scan')\n  handleScan(event: CustomEvent<InputScanData>) {\n    if ( this.modalTimer == 0 ) {\n      return;\n    }\n\n    // crear un elemento tipo DIV del tamaño del parentNode de this.el\n\n    const parent = this.el.parentNode;\n\n    const div = document.createElement('div');\n    div.style.position = 'fixed';\n    div.style.top = '0';\n    div.style.left = '0';\n    div.style.width = '100vw';\n    div.style.height = '100vh';\n    div.style.backgroundColor = 'rgba(254,254,254,0.65)';\n    div.style.zIndex = '1000';\n    div.style.display = 'flex';\n    div.style.alignItems = 'center';\n    div.style.justifyContent = 'center';\n    div.style.color = 'black';\n    div.style.fontSize = '3rem';\n    div.style.fontWeight = 'bold';\n    div.style.textAlign = 'center';\n    div.style.padding = '1rem';\n    div.style.boxSizing = 'border-box';\n    div.style.borderRadius = '1rem';\n    div.style.overflow = 'hidden';\n    div.style.textOverflow = 'ellipsis';\n    div.style.whiteSpace = 'nowrap';\n    div.style.cursor = 'pointer';\n    div.textContent = event.detail.text;\n    div.addEventListener('click', () => {\n      div.remove();\n    }\n    )\n    parent.appendChild(div);\n    setTimeout(() => {\n      div.remove();\n    }\n    , this.modalTimer);\n\n\n\n    \n  }\n\n  processText(text: string): InputScanData {\n    const scannedData = this.runRegex( text )\n\n    let data;\n    if ( scannedData ) {\n      data = scannedData;\n    } else {\n      data = {\n        type: InputScanType.DESCONOCIDO,\n        text: this.scannedText,\n        data:  {\n          text: this.scannedText,\n        }\n      }\n    }\n\n    return data;\n  }\n\n  onEnterHandler() {\n    if ( this.scannedText == '' ) {\n      return false;\n    }\n\n    // convierto el texto a InputScanData\n    const scannedData = this.processText(this.scannedText)\n    \n    // reinicializo texto\n    this.scannedText = '';\n\n    // emit the scanned data and reset the scannedText\n    this.scan.emit(scannedData);\n  }\n\n\n  @Listen('keydown', { target: 'document' })\n  handleKeyDown(event: KeyboardEvent) {\n      if (event.isComposing ) {\n        return;\n      }\n      if(event.code == 'Enter' || event.code == 'NumpadEnter' || event.code == 'Tab') {\n        return this.onEnterHandler();\n      } \n\n      if ( event.key == 'Shift' || event.key == 'Control' || event.key == 'Alt' || event.key == 'Meta' ) {\n        return;\n      }\n      \n      if ( event.key == 'Backspace' ) {\n        this.scannedText = this.scannedText.slice(0, -1);\n        return;\n      }\n\n      // write the string of the event to the scannedText only if it is a letter or a number\n      this.scannedText += event.key;\n  }\n\n\n  @State() scannedText = '';\n\n\n  /**\n   * Fired when the user press enter or tab\n   * used with scanners like BARCODES or QR\n   */\n  @Event() scan: EventEmitter<InputScanData>;\n\n\n  /**\n   * get raw scanned text\n   * @returns the text scanned\n   */\n  @Method()\n  async getText(): Promise<string> {\n    return this.scannedText\n  }\n\n  /**\n   * Structured scanned text\n   * @returns the text scanned\n   */\n  @Method()\n  async getData(): Promise<InputScanData> {\n    if ( this.scannedText == '' ) {\n      return null;\n    }\n\n    return this.processText(this.scannedText)\n  }\n\n\n  runRegex( text:string): InputScanData {\n    let regex,regrun\n      // DNI v1\n      // \"30368326    \"A\"1\"VILAR\"ALEJANDRO ERNESTO\"ARGENTINA\"07-06-1983\"M\"13-02-2011\"00038329892\"7019 \"13-02-2026\"616\"0\"ILRÑ2.01 CÑ110128.02 )No Cap.=\"UNIDADÑ DG200 Plus ÇÇ SERIE NMEROÑ ¡040:2009::0019\"\n      regex = /^\\\"?(\\w{8}) +\\\"?([a-z])\\\"?(\\w)\\\"?([a-z ]+)\\\"?([a-z ]+)\\\"?([a-z]+)\\\"?([0-9-]+)\\\"?([a-z])\"/gi\n      regrun = regex.exec( text )\n      if ( regrun ) {\n        return this.getDataFromDNIv1(regrun,  text );\n      }\n\n      // DNI v2\n      regex = /^\\\"?(\\d+)\\\"?([a-z ]+)\\\"?([a-z ]+)\\\"?([a-z])\\\"?(\\w{8})\\\"?([a-z])\\\"?([0-9-]+)/gi\n      regrun = regex.exec( text )\n      if ( regrun ) {\n        return this.getDataFromDNIv2(regrun,  text );\n      }\n\n\n      // Licencia de conducir\n      regex = /^\\\"?(\\w{8})\\\"?([a-z])\\\"?([a-z ]+)\\\"?([a-z ]+)\\\"?([a-z]+)\\\"?([0-9-]+)\\\"?([a-z])\\\"?([0-9-]+)/gi\n      regrun = regex.exec( text )\n      if ( regrun ) {\n        return this.getDataFromLicenciaDeCOnducir( text );\n      }\n\n      for ( let i = 0; i < this.regexToData.length; i++ ) {\n        const regexToDataItem = this.regexToData[i];\n        const regrun = regexToDataItem.regex.exec( text )\n        if ( regrun ) {\n          return this.getDataFromRegex(regexToDataItem.type, text );\n        }\n      }\n  }\n\n\n  getDataFromDNIv1 (inputScanner: RegExpExecArray, scannedText: string): InputScanData {\n\n    return {\n      type: InputScanType.DNIv1,\n      text: scannedText,\n      data:  {\n        apellido: inputScanner[4],\n        nombre: inputScanner[5],\n        dni: inputScanner[1],\n        fecha_nacimiento: inputScanner[6],\n        sexo: inputScanner[7],\n      }\n    }\n  }\n  \n\n  getDataFromDNIv2 (inputScanner: RegExpExecArray, scannedText: string): InputScanData {\n       \n    return {\n      type: InputScanType.DNIv2,\n      text: scannedText,\n      data:  {\n        apellido: inputScanner[2],\n        nombre: inputScanner[3],\n        dni: inputScanner[5],\n        fecha_nacimiento: inputScanner[7],\n        sexo: inputScanner[4],\n      }\n    }\n  }\n\n\n \n\n  getDataFromRegex (type: InputScanType, scannedText: string): InputScanData {\n    return {\n      type: type,\n      text: scannedText,\n      }\n  }\n\n  getDataFromLicenciaDeCOnducir (scannedText: string): InputScanData {\n    return this.getDataFromRegex(InputScanType.LICENCIA_CONDUCIR, scannedText)   \n  }\n\n  handleOnInpujtChangeEvent(ev: Event) {\n    this.scannedText = (ev.target as HTMLInputElement).value;\n  }\n\n\n  render() {\n    return (\n      <Host>\n        <input type=\"text\" value={this.scannedText} onChange={(ev) => this.handleOnInpujtChangeEvent(ev) }/>\n      </Host>\n    );\n  }\n\n}\n"],"mappings":"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"}