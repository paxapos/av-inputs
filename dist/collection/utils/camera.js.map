{"version":3,"file":"camera.js","sourceRoot":"","sources":["../../src/utils/camera.ts"],"names":[],"mappings":"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","sourcesContent":["import { createVideo, createCanvas, CameraDirection } from \"./camera.service\";\n\n\n\ninterface SuperCamera {\n    initCamera(parentElement: HTMLElement, direction: CameraDirection, drawImageCb: Function): Promise<void>,\n    takePicture(): Promise<Blob>,\n    resetCamera(): void,\n}\n\n\nexport class WebCamera implements SuperCamera {\n\n    elVideo: HTMLVideoElement;\n    stream: MediaStream;\n    canvas: HTMLCanvasElement;\n    direction: CameraDirection\n\n    constructor() {\n    }\n\n    public fotoActual: any;\n\n    async initCamera( parentElement: HTMLElement, direction: CameraDirection, drawImageCb: Function = null ) {\n        \n        this.resetCamera();\n\n        if ( !this.elVideo ) {\n            this.elVideo = createVideo()\n            parentElement.appendChild(this.elVideo)\n        }\n\n        if ( !this.canvas ) {\n            this.canvas = createCanvas(parentElement)\n            parentElement.appendChild(this.canvas)\n        }\n\n        this.direction = CameraDirection.Front\n        \n        if (navigator.mediaDevices.getUserMedia) {\n            console.info(\"la camara\")\n            const facingMode = (direction == CameraDirection.Front) ? \"user\": \"environment\"\n\n            navigator.mediaDevices.getUserMedia({\n                audio: false,\n                video: {\n                    width: { min: 200 },\n                    height: { min: 200 },\n                    facingMode: facingMode\n                }\n            })\n            .then((stream) => {\n                this.stream = stream;\n                console.info(\"la camara\", this.stream)\n                this.elVideo.srcObject = this.stream;\n\n                this.renderToCanvas( drawImageCb );\n            })\n            .catch(function (err0r) {\n                console.log(\"Something went wrong!\", err0r);\n            });\n        }\n    }\n\n\n    renderToCanvas( drawImageCb: Function = null) {\n\n        let ctx = this.canvas.getContext('2d');\n\n        let imgWidth = this.elVideo.videoWidth;\n        let imgHeight = this.elVideo.videoHeight;\n\n    \tvar imgSize = Math.min(imgWidth, imgHeight);\n        // The following two lines yield a central based cropping.\n        // They can both be amended to be 0, if you wish it to be\n        // a left based cropped image.\n    \tvar left = (imgWidth - imgSize) / 2;\n    \tvar top = (imgHeight - imgSize) / 2;\n\n        if ( typeof drawImageCb == 'function' ) {\n            drawImageCb.call(ctx, this.elVideo, left, top, imgSize, imgSize, 0,0, this.canvas.width, this.canvas.height)\n        } else {\n            ctx.drawImage(this.elVideo, left, top, imgSize, imgSize, 0,0, this.canvas.width, this.canvas.height);\n        }\n\n        requestAnimationFrame(() => this.renderToCanvas() );\n\n    }\n\n    resetCamera() {\n        if (this.stream) this.stream?.getVideoTracks()?.forEach(track => {\n            track?.stop()\n            this.stream?.removeTrack(track)\n        });\n        if (this.elVideo) this.elVideo.srcObject = null;\n    }\n\n    async takePicture(): Promise<File> {\n        return new Promise((resolve, reject) => {\n            try {\n                this.canvas.toBlob( (blob) => {\n                    const filename = \"pic_\" + Math.abs( Math.round( Math.random() * 1000))\n                    var file = new File([blob], filename, {type: \"image/jpeg\"});\n                    resolve(file);\n                }, \"image/jpeg\", 0.8)\n            } catch (error) {\n                reject(error);\n            }\n\n          });\n\n    }\n\n}\n\n\n\nexport class CameraService {\n\n    private camaraManager: SuperCamera\n\n    constructor() {\n      \n        this.camaraManager = new WebCamera()\n    }\n\n\n    async initCamera( parentElement: HTMLElement, cameraDirection: CameraDirection , drawImageCb: Function = null ) {\n       this.camaraManager.initCamera( parentElement, cameraDirection, drawImageCb )\n    }\n\n    async takePicture(): Promise<Blob> {\n        return await this.camaraManager.takePicture()\n    }\n\n    async resetCamera() {\n        return await this.camaraManager.resetCamera()\n    }\n}\n\n\n\nexport const camera = new CameraService()\n"]}