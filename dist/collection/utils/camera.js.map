{"version":3,"file":"camera.js","sourceRoot":"","sources":["../../src/utils/camera.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,YAAY,EAAmB,iBAAiB,EAAE,cAAc,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAY9H,MAAM,OAAO,SAAS;IAOX,KAAK,CAAC,UAAU,CAAE,aAA0B,EAAE,SAA0B,EAAE,cAAwB,IAAI;QAEzG,IAAI,CAAC,WAAW,EAAE,CAAC;QAEnB,IAAK,CAAC,IAAI,CAAC,OAAO,EAAG,CAAC;YAClB,IAAI,CAAC,OAAO,GAAG,WAAW,EAAE,CAAA;QAChC,CAAC;QAED,IAAK,CAAC,IAAI,CAAC,MAAM,EAAG,CAAC;YACjB,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,aAAa,CAAC,CAAA;YACzC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAC1C,CAAC;QAED,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAA;QAE1C,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAA;QAEtD,OAAO,IAAI,CAAC,MAAM,CAAA;IACtB,CAAC;IAGM,WAAW;;QACd,IAAI,IAAI,CAAC,MAAM;YAAE,MAAA,MAAA,IAAI,CAAC,MAAM,0CAAE,cAAc,EAAE,0CAAE,OAAO,CAAC,KAAK,CAAC,EAAE;;gBAC5D,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,EAAE,CAAA;gBACb,MAAA,IAAI,CAAC,MAAM,0CAAE,WAAW,CAAC,KAAK,CAAC,CAAA;YACnC,CAAC,CAAC,CAAC;QACH,IAAI,IAAI,CAAC,OAAO;YAAE,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;IACpD,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,UAAkB,IAAI;QAC3C,OAAO,MAAM,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;CAEJ;AAGD,MAAM,CAAC,MAAM,MAAM,GAAG,IAAI,SAAS,EAAE,CAAA","sourcesContent":["import { createVideo, createCanvas, CameraDirection, initWebcamToVideo, renderToCanvas, takePicture } from \"./camera.service\";\n\n\n\ninterface SuperCamera {\n    initCamera(parentElement: HTMLElement, direction: CameraDirection, drawImageCb: Function): Promise<HTMLCanvasElement>,\n    takePicture(): Promise<Blob>,\n    resetCamera(): void,\n}\n\n\n\nexport class WebCamera implements SuperCamera {\n\n    private elVideo: HTMLVideoElement;\n    private stream: MediaStream;\n    private canvas: HTMLCanvasElement;\n\n\n    public async initCamera( parentElement: HTMLElement, direction: CameraDirection, drawImageCb: Function = null) {\n\n        this.resetCamera();\n\n        if ( !this.elVideo ) {\n            this.elVideo = createVideo()\n        }\n\n        if ( !this.canvas ) {\n            this.canvas = createCanvas(parentElement)\n            parentElement.appendChild(this.canvas)\n        }\n\n        initWebcamToVideo(this.elVideo, direction)\n\n        renderToCanvas(this.canvas, this.elVideo, drawImageCb)\n\n        return this.canvas\n    }\n\n\n    public resetCamera() {\n        if (this.stream) this.stream?.getVideoTracks()?.forEach(track => {\n            track?.stop()\n            this.stream?.removeTrack(track)\n        });\n        if (this.elVideo) this.elVideo.srcObject = null;\n    }\n\n    public async takePicture(quality: number = 0.85): Promise<File> {\n        return await takePicture(this.canvas, quality);\n    }\n\n}\n\n\nexport const camera = new WebCamera()\n"]}