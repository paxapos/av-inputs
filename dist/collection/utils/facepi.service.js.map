{"version":3,"file":"facepi.service.js","sourceRoot":"","sources":["../../src/utils/facepi.service.ts"],"names":[],"mappings":"AACA,OAAO,EACH,YAAY,EACZ,eAAe,EAEhB,MAAM,yBAAyB,CAAC;AACnC,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAc/C;;;EAGE;AACF,MAAM,OAAO,cAAc;EAIvB,YAAY,sBAAsB,GAAG,GAAG;IACpC,IAAI,CAAC,sBAAsB,CAAC,sBAAsB,CAAC,CAAC;EACxD,CAAC;EAED,iCAAiC;EACjC,KAAK,CAAC,sBAAsB,CAAG,sBAAsB;IACjD,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC,cAAc,CACjD,kEAAkE,CACnE,CAAC;IACF,IAAI,CAAC,YAAY,GAAG,MAAM,YAAY,CAAC,iBAAiB,CAAC,MAAM,EAAE;MAC/D,uBAAuB,EAAE,GAAG;MAC5B,sBAAsB,EAAE,sBAAsB;MAC9C,WAAW,EAAE;QACX,cAAc,EAAE,8HAA8H;QAC9I,QAAQ,EAAE,KAAK;OAChB;MACD,WAAW,EAAE,OAAO;KACrB,CAAC,CAAC;EACL,CAAC;EAAA,CAAC;EAIJ,KAAK,CAAC,UAAU,CAAC,EAAmB,EAAE,SAA8B;IAElE,IAAK,EAAE,IAAI,IAAI,CAAC,YAAY,EAAG;MAE3B,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC,UAAU,CAAC;MAE7E,IAAK,CAAC,SAAS,EAAG;QAChB,OAAO,IAAI,CAAA;OACZ;MAED,IAAI,YAAuB,CAAC;MAE5B,IAAK,SAAS,CAAC,MAAM,IAAI,CAAC,EAAG;QACzB,YAAY,GAAG,SAAS,CAAC,CAAC,CAAC,CAAA;OAC9B;MAED,IAAK,SAAS,CAAC,MAAM,GAAG,CAAC,EAAG;QACxB,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,EAAE,EAAE;UAClC,OAAO,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;QACxD,CAAC,CAAC,CAAA;QACF,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;OAC3B;MAED,OAAO,MAAM,IAAI,CAAC,2BAA2B,CAAC,EAAE,EAAE,YAAY,CAAC,CAAA;KAChE;IAED,OAAO,IAAI,CAAA;EACf,CAAC;EAED,KAAK,CAAC,2BAA2B,CAAC,EAAE,EAAE,SAAoB;IACxD,kEAAkE;IAClE,IAAK,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE;MACzC,OAAO,IAAI,CAAA;KACZ;IAED,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,EAAE,EAAE,SAAS,CAAC,WAAW,CAAC,CAAA;IACvD,OAAO;MACH,SAAS,EAAE,SAAS;MACpB,aAAa,EAAE,EAAE;MACjB,OAAO,EAAE,IAAI;KAChB,CAAA;EACL,CAAC;CACJ","sourcesContent":["\nimport {\n    FaceDetector,\n    FilesetResolver,\n    Detection\n  } from \"@mediapipe/tasks-vision\";\nimport { videoToBlob } from \"./camera.service\";\n\n\n export interface DetectionImg{\n    detection: Detection,\n    currentTarget: HTMLImageElement|HTMLVideoElement|HTMLCanvasElement,\n    blobImg: Blob,\n  }\n  \n\n\n  \n\n  \n/**\n * create a class \"FaceapiService\" with a constructor\n * \n*/\nexport class FaceapiService {\n\n    faceDetector: FaceDetector;\n\n    constructor(minDetectionConfidence = 0.6) {\n        this.initializefaceDetector(minDetectionConfidence);\n    }\n\n    // Initialize the object detector\n    async initializefaceDetector ( minDetectionConfidence ) {\n        const vision = await FilesetResolver.forVisionTasks(\n          \"https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.0/wasm\"\n        );\n        this.faceDetector = await FaceDetector.createFromOptions(vision, {\n          minSuppressionThreshold: 0.3,\n          minDetectionConfidence: minDetectionConfidence,\n          baseOptions: {\n            modelAssetPath: `https://storage.googleapis.com/mediapipe-models/face_detector/blaze_face_short_range/float16/1/blaze_face_short_range.tflite`,\n            delegate: \"GPU\"\n          },\n          runningMode: \"VIDEO\",\n        });\n      };\n\n      \n\n    async detectFace(el:HTMLVideoElement, timeStamp: DOMHighResTimeStamp):  Promise<DetectionImg> {\n\n      if ( el && this.faceDetector ) {\n         \n          const detection = this.faceDetector.detectForVideo(el, timeStamp).detections;\n\n          if ( !detection ) {\n            return null\n          }\n          \n          let detectionObj: Detection;\n\n          if ( detection.length == 1 ) {\n              detectionObj = detection[0]\n          }\n\n          if ( detection.length > 1 ) {\n              const sorted = detection.sort((a,b) => {\n                  return b.categories[0].score - a.categories[0].score\n              })\n              detectionObj = sorted[0]\n          }\n          \n          return await this.getDetectorImgFromDetection(el, detectionObj)\n        }\n\n        return null\n    }\n\n    async getDetectorImgFromDetection(el, detection: Detection): Promise<DetectionImg> {\n      // recortar canvas del el para que tenga el tamaño de la detección\n      if ( !detection || !detection.boundingBox) {\n        return null\n      }\n      \n      const blob = await videoToBlob(el, detection.boundingBox)\n        return {\n            detection: detection,\n            currentTarget: el,\n            blobImg: blob\n        }\n    }\n}\n\n\n"]}