{"version":3,"file":"input-file-from-webcam.js","sourceRoot":"","sources":["../../../src/components/input-file-from-webcam/input-file-from-webcam.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAgB,OAAO,EAAE,MAAM,eAAe,CAAC;AACvG,OAAO,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AAC5C,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAC;AAQ7D,MAAM,OAAO,mBAAmB;;iBAQyB,GAAG;kBAKF,GAAG;sBAKY,eAAe,CAAC,KAAK;uBAU3D,IAAI;;EAErC;;;KAGG;EAEH,KAAK,CAAC,OAAO;IACX,gBAAgB;IAChB,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,WAAW,EAAE,CAAA;IACtC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,OAAO,GAAG,CAAA;EACZ,CAAC;EAED;;KAEG;EAEH,KAAK,CAAC,WAAW;IACf,gBAAgB;IAChB,MAAM,CAAC,WAAW,EAAE,CAAA;EACtB,CAAC;EAED;;KAEG;EAEH,KAAK,CAAC,YAAY;IAChB,IAAI,CAAC,kBAAkB,EAAE,CAAA;EAC3B,CAAC;EA2BD,cAAc;IACZ,IAAI,CAAC,kBAAkB,EAAE,CAAA;EAC3B,CAAC;EAID;;;KAGG;EACK,kBAAkB;IACxB,+CAA+C;IAC/C,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAA;IAC3G,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAE,IAAI,CAAC,UAAU,CAAI,CAAA;EAClD,CAAC;EAID,kBAAkB;EAElB,CAAC;EAED,KAAK,CAAC,kBAAkB;IACtB,MAAM,CAAC,UAAU,CAAE,IAAI,CAAC,EAAE,EAAE,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAE,CAAC;EACxE,CAAC;EAED,KAAK,CAAC,oBAAoB;IACxB,MAAM,CAAC,WAAW,EAAE,CAAA;EACtB,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI,IAAC,KAAK,EAAE,EAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,GAAC,IAAI,EAAC;MAE7D,YAAM,IAAI,EAAC,QAAQ,GAAQ;MAE3B,eAAa;MAEb,YAAM,IAAI,EAAC,OAAO,GAAQ,CACrB,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAEF","sourcesContent":["import { Component, Host, h, Method, Listen, Prop, Event, EventEmitter, Element } from '@stencil/core';\nimport { camera } from '../../utils/camera';\nimport { CameraDirection } from '../../utils/camera.service';\n\n\n@Component({\n  tag: 'input-file-from-webcam',\n  styleUrl: 'input-file-from-webcam.css',\n  shadow: true,\n})\nexport class InputFileFromWebcam {\n\n\n  @Element() el: HTMLElement;\n\n  /**\n   * Width of the video element\n   */\n  @Prop({reflect: true, mutable: true}) width?: number = 460\n\n  /**\n   * height of the video element\n   */\n  @Prop({reflect: true, mutable: true}) height?: number = 460\n\n  /**\n   * FacingModel optiones following https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints/facingMode#value\n   */\n  @Prop({ mutable: true, reflect: true }) facingMode?: CameraDirection = CameraDirection.Front\n\n  /**\n   * you can pass a function and override the canvas.drawImage function so you\n   * can change the image adding filters or any kind of magin in your image\n   * \n   * you just need to crear a function with all canvas.-drawImage arguments\n   * \n   * here you have the list of vars you get: videoElement, left, top, imgSize, imgSize, 0,0, canvas.width, canvas.height\n   */\n  @Prop() drawImageCb?: Function = null\n\n  /**\n   * Take a picture\n   * @returns a blob with the image\n   */\n  @Method()\n  async takePic(): Promise<Blob> {\n    // show a prompt\n    const pic = await camera.takePicture()\n    this.pictureTaken.emit(pic);\n    return pic\n  }\n\n  /**\n   * Reset camera\n   */\n  @Method()\n  async resetCamera(): Promise<void> {\n    // show a prompt\n    camera.resetCamera()\n  }\n\n  /**\n   * Toogle webcam, for example in mobile show front or back camera\n   */\n  @Method()\n  async toggleCamera(): Promise<void>{\n    this.__toogleFacingMode()\n  }\n\n\n  /**\n   * Event emitted when the user takes a picture\n   */\n  @Event({\n    eventName: 'pictureTaken',\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  }) pictureTaken: EventEmitter<Blob>;\n\n\n  /**\n   * Event emitted when the user takes a picture\n   */\n  @Event({\n    eventName: 'facingModeChanged',\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  }) facingModeChanged: EventEmitter<CameraDirection>;\n\n\n\n  @Listen('click')\n  onClickHandler() {\n    this.__toogleFacingMode()\n  }\n\n \n\n  /**\n   * Toogle webcam, for example in mobile show front or back camera\n   * you can block this behaviour by setting the facingMode Property\n   */\n  private __toogleFacingMode() {\n    // only change if no facinMode property was set\n    this.facingMode = (this.facingMode != CameraDirection.Front) ? CameraDirection.Front : CameraDirection.Rear\n    this.facingModeChanged.emit( this.facingMode   )\n  }\n\n \n\n  componentWillMount() {\n   \n  }\n  \n  async componentDidRender() {\n    camera.initCamera( this.el, CameraDirection.Front, this.drawImageCb );\n  }\n\n  async disconnectedCallback() {\n    camera.resetCamera()\n  }\n\n  render() {\n    return (\n      <Host style={{height: this.height+\"px\", width: this.width+\"px\"}}>\n\n        <slot name='before'></slot>\n        \n        <slot></slot>\n\n        <slot name='after'></slot>\n      </Host>\n    );\n  }\n\n}\n"]}