{"version":3,"file":"input-scan-reader.js","sourceRoot":"","sources":["../../../src/components/input-scan-reader/input-scan-reader.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, Event, Method, Element, EventEmitter, State, Listen } from '@stencil/core';\n\n\nexport interface InputScanData {\n    type: InputScanType,\n    text: string,\n    data:  any\n}\n\n\nconst enum InputScanType {\n  URL = 'URL',\n  EMAIL = 'EMAIL',\n  DNIv1 = 'DNIv1',\n  DNIv2 = 'DNIv2',\n  LICENCIA_CONDUCIR = 'LICENCIA_CONDUCIR',\n  DESCONOCIDO = 'DESCONOCIDO'\n\n}\n\n\n\n@Component({\n  tag: 'input-scan-reader',\n  styleUrl: 'input-scan-reader.css',\n  shadow: true,\n})\nexport class InputScanReader {\n\n\n\n  @Element() el: HTMLElement;\n\n\n  runRegex(): InputScanData {\n    let regex,regrun\n      // DNI v1\n      // \"30368326    \"A\"1\"VILAR\"ALEJANDRO ERNESTO\"ARGENTINA\"07-06-1983\"M\"13-02-2011\"00038329892\"7019 \"13-02-2026\"616\"0\"ILRÑ2.01 CÑ110128.02 )No Cap.=\"UNIDADÑ DG200 Plus ÇÇ SERIE NMEROÑ ¡040:2009::0019\"\n      regex = /^\\\"?(\\w{8}) +\\\"?([a-z])\\\"?(\\w)\\\"?([a-z ]+)\\\"?([a-z ]+)\\\"?([a-z]+)\\\"?([0-9-]+)\\\"?([a-z])\"/gi\n      regrun = regex.exec(this.scannedText)\n      if ( regrun ) {\n        return this.getDataFromDNIv1(regrun, this.scannedText);\n        \n      }\n\n      // DNI v2\n      regex = /^\\\"?(\\d+)\\\"?([a-z ]+)\\\"?([a-z ]+)\\\"?([a-z])\\\"?(\\w{8})\\\"?([a-z])\\\"?([0-9-]+)/gi\n      regrun = regex.exec(this.scannedText)\n      if ( regrun ) {\n        return this.getDataFromDNIv2(regrun, this.scannedText);\n      }\n\n\n      // Licencia de conducir\n      regex = /^\\\"?(\\w{8})\\\"?([a-z])\\\"?([a-z ]+)\\\"?([a-z ]+)\\\"?([a-z]+)\\\"?([0-9-]+)\\\"?([a-z])\\\"?([0-9-]+)/gi\n      regrun = regex.exec(this.scannedText)\n      if ( regrun ) {\n        return this.getDataFromLicenciaDeCOnducir(regrun, this.scannedText);\n      }\n\n\n      // email\n      regex = /^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/gi\n      regrun = regex.exec(this.scannedText)\n      if ( regrun ) {\n        return this.getDataFromMail(regrun, this.scannedText);\n      \n      }\n      // url\n      regex = /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/gi\n      regrun = regex.exec(this.scannedText)\n      if ( regrun ) {\n        return this.getDataFromURL(regrun, this.scannedText);\n      }\n  }\n\n  @Listen('keydown', { target: 'document' })\n  handleKeyDown(event: KeyboardEvent) {\n      if (event.isComposing ) {\n        return;\n      }\n\n      if(event.code == 'Enter') {\n        // emit the scanned data and reset the scannedText\n        this.scan.emit(this.scannedData);\n        this.scannedText = '';\n        this.scannedData = null;\n        return;\n      } \n\n      if ( event.key == 'Shift' || event.key == 'Control' || event.key == 'Alt' || event.key == 'Meta' ) {\n        return;\n      }\n\n      \n      // write the string of the event to the scannedText only if it is a letter or a number\n      this.scannedText += event.key;\n      this.el.textContent = this.scannedText;\n\n\n      const scannedData = this.runRegex()\n\n      if ( scannedData ) {\n        this.scannedData = scannedData;\n      } else {\n        this.scannedData = {\n          type: InputScanType.DESCONOCIDO,\n          text: this.scannedText,\n          data:  {\n            text: this.scannedText,\n          }\n        }\n      }\n\n  }\n\n \n\n  @State() scannedText = '';\n  @State() scannedData: InputScanData;\n\n  @Event() scan: EventEmitter<InputScanData>;\n\n\n  @Method()\n  async showPrompt() {\n    // show a prompt\n  }\n\n\n  getDataFromDNIv1 (inputScanner: RegExpExecArray, scannedText: string): InputScanData {\n\n    return {\n      type: InputScanType.DNIv1,\n      text: scannedText,\n      data:  {\n        apellido: inputScanner[4],\n        nombre: inputScanner[5],\n        dni: inputScanner[1],\n        fecha_nacimiento: inputScanner[6],\n        sexo: inputScanner[7],\n      }\n    }\n  }\n\n\n  getDataFromDNIv2 (inputScanner: RegExpExecArray, scannedText: string): InputScanData {\n       \n    return {\n      type: InputScanType.DNIv1,\n      text: scannedText,\n      data:  {\n        apellido: inputScanner[2],\n        nombre: inputScanner[3],\n       \n        dni: inputScanner[5]\n      }\n    }\n  }\n\n\n  getDataFromMail (inputScanner: RegExpExecArray, scannedText: string): InputScanData {\n       \n    return {\n      type: InputScanType.EMAIL,\n      text: scannedText,\n      data:  {\n        email: inputScanner[1],\n      }\n    }\n  }\n\n  getDataFromURL (inputScanner: RegExpExecArray, scannedText: string): InputScanData {\n\n    return {\n      type: InputScanType.URL,\n      text: scannedText,\n      data:  {\n        url: inputScanner[1],\n      }\n    }\n  }\n\n  getDataFromLicenciaDeCOnducir (inputScanner: RegExpExecArray, scannedText: string): InputScanData {\n       \n    return {\n      type: InputScanType.DNIv1,\n      text: scannedText,\n      data:  {\n        nosequeva: inputScanner[1],\n      }\n    }\n  }\n\n\n  render() {\n    return (\n      <Host>\n        <input type=\"text\" value={this.scannedText} />\n      </Host>\n    );\n  }\n\n}\n"]}