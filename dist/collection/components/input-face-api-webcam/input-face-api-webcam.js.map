{"version":3,"file":"input-face-api-webcam.js","sourceRoot":"","sources":["../../../src/components/input-face-api-webcam/input-face-api-webcam.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, Element, Prop, Event,EventEmitter, Method, State, Watch } from '@stencil/core';\nimport { DetectionImg, faceapiService } from '../../utils/facepi.service';\nimport { CameraDirection, createCanvas, createVideo, initWebcamToVideo, renderToCanvas } from '../../utils/camera.service';\nimport { Detection, FaceLandmarkerResult } from '@mediapipe/tasks-vision';\nimport { pxTimer } from 'src/utils/utils';\nimport { LabeledDescriptorsArray } from './TrainedModel';\nimport { getBestMatch } from './distance.worker';\n\n\nexport interface iFaceDetected{\n  blob: Blob\n  result: Detection\n}\n\n@Component({\n  tag: 'input-face-api-webcam',\n  styleUrl: 'input-face-api-webcam.css',\n  shadow: true,\n})\nexport class InputFaceApiWebcam {\n  \n  //webcam stream\n  video: HTMLVideoElement\n\n  //canvas to draw webcam\n  canvas: HTMLCanvasElement\n\n\n\n  @Element() el: HTMLElement;\n\n  @State() detectionResult: DetectionImg\n\n  @State() loaded: boolean = false\n\n  @Watch('detectionResult')\n  detectionResultChangedHandler(newValue: DetectionImg, oldValue: DetectionImg) {\n    if ( newValue?.blobImg ) {\n      this.faceDetected.emit(newValue)\n    } else {\n      if ( oldValue ) {\n        this.faceStopDetection.emit()\n      }\n    }\n  }\n\n  /**\n   * disable face detection\n   */\n  @Prop({reflect: true, mutable: true}) enableDetection:boolean = true;\n\n\n  /**\n   * trained models to use for recognition an best match\n   */\n  @Prop({reflect: false}) trainedModel?: LabeledDescriptorsArray\n\n\n  /**\n   * Width of the video element\n   */\n  @Prop({reflect: true, mutable: true}) width?: number = 460\n\n  /**\n   * height of the video element\n   */\n  @Prop({reflect: true, mutable: true}) height?: number = 460\n\n  /**\n   * Score threshold to detect a face\n   */\n  @Prop({reflect: true, mutable: true}) scoreThreshold?: number = 0.65\n\n  /**\n   * Score threshold to detect a face\n   */\n  @Prop({reflect: true, mutable: true}) detectionTimer?: number = 1500\n\n  /**\n   * FacingModel optiones following https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints/facingMode#value\n   */\n  @Prop({ mutable: true, reflect: true }) facingMode?: CameraDirection = CameraDirection.Front\n\n\n  /**\n   * disable face detection\n   */\n  @Method()\n  async stopDetection(): Promise<void> {\n    this.enableDetection = false;\n  }\n\n  /**\n   * enable face detection\n   */\n  @Method()\n  async startDetection(): Promise<void> {\n    this.enableDetection = true;\n  }\n\n\n  /**\n   * Giving a blob image, get the face landmarks\n   * @returns face landmarks\n   */\n  @Method()\n  async getBlobImageDescriptors(blob: Blob): Promise<FaceLandmarkerResult> {\n    return await faceapiService.getFaceLandmarksFromBlob( blob )\n  }\n\n  /**\n   * Giving current face in video canvas, get the face landmarks\n   * @returns face landmarks\n   */\n  @Method()\n  async getFaceLandMarks(): Promise<FaceLandmarkerResult> {\n    if ( this.detectionResult && this.detectionResult.blobImg ) {\n      return await faceapiService.getFaceLandmarksFromBlob( this.detectionResult.blobImg )\n    } else {\n      return null\n    }\n  }\n\n  /**\n   * Predicts best face match, uses worker to calculate distance between the given blob and the trained model \n   * passed in trainedModel prop\n   * @param blob \n   * @returns \n   */\n  @Method()\n  async predictBestMatch(blob?: Blob): Promise<any> {\n    console.info(\"tyrained model es\", this.trainedModel);\n    if ( !this.trainedModel ) {\n      return null;\n    }\n\n    let lm;\n    if ( !blob ) {\n      lm = await faceapiService.getFaceLandmarksFromBlob( blob )\n    } else {\n      lm = await this.getFaceLandMarks()\n    }\n    // for each trained model of this.trainedModels get minimum distance\n    const best = await getBestMatch( this.trainedModel, lm.faceLandmarks[0] )\n    return best;\n\n  }\n\n  /**\n   * Event emitted when a face is detected in video stream\n   */\n  @Event({\n    eventName: 'faceDetected',\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  }) faceDetected: EventEmitter<DetectionImg>;\n\n\n  /**\n   * Event emitted when face detection whas stopped\n   */\n  @Event({\n    eventName: 'faceStopDetection',\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  }) faceStopDetection: EventEmitter<void>;\n\n\n  async componentWillLoad() {\n   \n    this.video = createVideo()\n\n    this.canvas = createCanvas(this.el)\n    this.canvas.width = this.width\n    this.canvas.height = this.height\n\n    this.el.appendChild(this.canvas)\n\n    await faceapiService.initialize()\n\n    console.info(\"el faceapi es\", faceapiService);\n\n    initWebcamToVideo(this.video, this.facingMode)\n\n    renderToCanvas( this.canvas, this.video)\n    \n    this.loaded = true;\n\n    requestAnimationFrame(() => {\n      this.webcamRender() \n    })\n  }\n\n\n  lastVideoTime = -1;\n\n  async webcamRender () {\n\n    const startTimeMs = performance.now();\n\n\n    // Detect faces using detectForVideo\n    if ( this.video.currentTime !== this.lastVideoTime ) {\n      this.lastVideoTime = this.video.currentTime;\n   \n      if ( this.enableDetection ) {\n        // get context of canvas and create paning and zoooming to center\n        this.detectionResult = await faceapiService.detectFace( this.video, startTimeMs )\n      }\n    }\n    \n    await pxTimer(this.detectionTimer)\n\n    requestAnimationFrame(() => {\n      this.webcamRender() \n    })\n    \n};\n\n\ndrawWebcamnToCanvas(ctx) {\n  let imgWidth = this.video.videoWidth;\n  let imgHeight = this.video.videoHeight;\n\n  var imgSize = Math.min(imgWidth, imgHeight);\n    // The following two lines yield a central based cropping.\n    // They can both be amended to be 0, if you wish it to be\n    // a left based cropped image.\n  var left = (imgWidth - imgSize) / 2;\n  var top = (imgHeight - imgSize) / 2;\n\n  // ctx clear all\n  ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n  ctx.drawImage(this.video, left, top, imgSize, imgSize, 0,0, this.canvas.width, this.canvas.height);\n}\n\n\n  render() {\n    const hostStyle = {\n      height: this.height+\"px\", \n      width: this.width+\"px\",\n      visibility: this.loaded ? \"visible\" : \"hidden\",\n    }\n\n    return (\n      <Host style={hostStyle}>\n        <slot name='before'></slot>\n        <slot></slot>\n        <slot name='after'></slot>\n      </Host>\n    );\n  }\n\n}\n"]}