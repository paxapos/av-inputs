{"file":"input-file-from-webcam.entry.esm.js","mappings":"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","names":[],"sources":["./src/utils/camera.ts","./src/components/input-file-from-webcam/input-file-from-webcam.css?tag=input-file-from-webcam&encapsulation=shadow","./src/components/input-file-from-webcam/input-file-from-webcam.tsx"],"sourcesContent":["import { createVideo, createCanvas, CameraDirection } from \"./camera.service\";\n\n\n\ninterface SuperCamera {\n    initCamera(parentElement: HTMLElement, direction: CameraDirection, drawImageCb: Function): Promise<void>,\n    takePicture(): Promise<Blob>,\n    resetCamera(): void,\n}\n\n\nexport class WebCamera implements SuperCamera {\n\n    elVideo: HTMLVideoElement;\n    stream: MediaStream;\n    canvas: HTMLCanvasElement;\n    direction: CameraDirection\n\n    constructor() {\n    }\n\n    public fotoActual: any;\n\n    async initCamera( parentElement: HTMLElement, direction: CameraDirection, drawImageCb: Function = null ) {\n        \n        this.resetCamera();\n\n        this.elVideo = createVideo(parentElement)\n        this.canvas = createCanvas(parentElement)\n\n        this.direction = CameraDirection.Front\n        \n        if (navigator.mediaDevices.getUserMedia) {\n            console.info(\"la camara\")\n            const facingMode = (direction == CameraDirection.Front) ? \"user\": \"environment\"\n\n            navigator.mediaDevices.getUserMedia({\n                audio: false,\n                video: {\n                    width: { min: 200 },\n                    height: { min: 200 },\n                    facingMode: facingMode\n                }\n            })\n            .then((stream) => {\n                this.stream = stream;\n                console.info(\"la camara\", this.stream)\n                this.elVideo.srcObject = this.stream;\n\n                this.renderToCanvas( drawImageCb );\n            })\n            .catch(function (err0r) {\n                console.log(\"Something went wrong!\", err0r);\n            });\n        }\n    }\n\n\n    renderToCanvas( drawImageCb: Function = null) {\n\n        let ctx = this.canvas.getContext('2d');\n\n        let imgWidth = this.elVideo.videoWidth;\n        let imgHeight = this.elVideo.videoHeight;\n\n    \tvar imgSize = Math.min(imgWidth, imgHeight);\n        // The following two lines yield a central based cropping.\n        // They can both be amended to be 0, if you wish it to be\n        // a left based cropped image.\n    \tvar left = (imgWidth - imgSize) / 2;\n    \tvar top = (imgHeight - imgSize) / 2;\n\n        if ( typeof drawImageCb == 'function' ) {\n            drawImageCb.call(ctx, this.elVideo, left, top, imgSize, imgSize, 0,0, this.canvas.width, this.canvas.height)\n        } else {\n            ctx.drawImage(this.elVideo, left, top, imgSize, imgSize, 0,0, this.canvas.width, this.canvas.height);\n        }\n\n        requestAnimationFrame(() => this.renderToCanvas() );\n\n    }\n\n    resetCamera() {\n        if (this.stream) this.stream?.getVideoTracks()?.forEach(track => {\n            track?.stop()\n            this.stream?.removeTrack(track)\n        });\n        if (this.elVideo) this.elVideo.srcObject = null;\n    }\n\n    async takePicture(): Promise<File> {\n        return new Promise((resolve, reject) => {\n            try {\n                this.canvas.toBlob( (blob) => {\n                    const filename = \"pic_\" + Math.abs( Math.round( Math.random() * 1000))\n                    var file = new File([blob], filename, {type: \"image/jpeg\"});\n                    resolve(file);\n                }, \"image/jpeg\", 0.8)\n            } catch (error) {\n                reject(error);\n            }\n\n          });\n\n    }\n\n}\n\n\n\nexport class CameraService {\n\n    private camaraManager: SuperCamera\n\n    constructor() {\n      \n        this.camaraManager = new WebCamera()\n    }\n\n\n    async initCamera( parentElement: HTMLElement, cameraDirection: CameraDirection , drawImageCb: Function = null ) {\n       this.camaraManager.initCamera( parentElement, cameraDirection, drawImageCb )\n    }\n\n    async takePicture(): Promise<Blob> {\n        return await this.camaraManager.takePicture()\n    }\n\n    async resetCamera() {\n        return await this.camaraManager.resetCamera()\n    }\n}\n\n\n\nexport const camera = new CameraService()\n",":host {\n  display: inline-block;\n  width: 100px;\n  filter: drop-shadow(2px 4px 6px black);\n  border: #5a5252 1px solid;\n  border-style: groove;\n}\n\n\nvideo {\n  display: none;\n}\n\ncanvas {\n  width: 100%;\n  height: 100%;\n}","import { Component, Host, h, Method, Listen, Prop, Event, EventEmitter, Element } from '@stencil/core';\nimport { camera } from '../../utils/camera';\nimport { CameraDirection } from '../../utils/camera.service';\n\n\n@Component({\n  tag: 'input-file-from-webcam',\n  styleUrl: 'input-file-from-webcam.css',\n  shadow: true,\n})\nexport class InputFileFromWebcam {\n\n\n  @Element() el: HTMLElement;\n\n\n  @Prop({reflect: true, mutable: true}) width?: number = 460\n  @Prop({reflect: true, mutable: true}) height?: number = 460\n\n  /**\n   * FacingModel optiones following https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints/facingMode#value\n   */\n  @Prop({ mutable: true, reflect: true }) facingMode?: CameraDirection = CameraDirection.Front\n\n  /**\n   * you can pass a function and override the canvas.drawImage function so you\n   * can change the image adding filters or any kind of magin in your image\n   * \n   * you just need to crear a function with all canvas.-drawImage arguments\n   * \n   * here you have the list of vars you get: videoElement, left, top, imgSize, imgSize, 0,0, canvas.width, canvas.height\n   */\n  @Prop() drawImageCb?: Function = null\n\n  @Method()\n  async takePic(): Promise<Blob> {\n    // show a prompt\n    const pic = await camera.takePicture()\n    this.pictureTaken.emit(pic);\n    return pic\n  }\n\n  @Method()\n  async resetCamera(): Promise<void> {\n    // show a prompt\n    camera.resetCamera()\n  }\n\n  @Method()\n  async toggleCamera(): Promise<void>{\n    this.__toogleFacingMode()\n  }\n\n\n  @Event({\n    eventName: 'pictureTaken',\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  }) pictureTaken: EventEmitter<Blob>;\n\n  @Event({\n    eventName: 'facingModeChanged',\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  }) facingModeChanged: EventEmitter<CameraDirection>;\n\n\n\n  @Listen('click')\n  onClickHandler() {\n    this.__toogleFacingMode()\n  }\n\n \n\n  /**\n   * Toogle webcam, for example in mobile show front or back camera\n   * you can block this behaviour by setting the facingMode Property\n   */\n  private __toogleFacingMode() {\n    // only change if no facinMode property was set\n    this.facingMode = (this.facingMode != CameraDirection.Front) ? CameraDirection.Front : CameraDirection.Rear\n    this.facingModeChanged.emit( this.facingMode   )\n  }\n\n \n\n  componentWillMount() {\n   \n  }\n  \n  async componentDidRender() {\n    camera.initCamera( this.el, CameraDirection.Front, this.drawImageCb );\n  }\n\n  async disconnectedCallback() {\n    camera.resetCamera()\n  }\n\n  render() {\n    return (\n      <Host style={{height: this.height+\"px\", width: this.width+\"px\"}}>\n\n        <slot name='before'></slot>\n        \n        <slot></slot>\n\n        <slot name='after'></slot>\n      </Host>\n    );\n  }\n\n}\n"],"version":3}