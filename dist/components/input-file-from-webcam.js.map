{"file":"input-file-from-webcam.js","mappings":";;;MAYa,SAAS;EAOX,MAAM,UAAU,CAAE,aAA0B,EAAE,SAA0B,EAAE,cAAwB,IAAI;IAEzG,IAAI,CAAC,WAAW,EAAE,CAAC;IAEnB,IAAK,CAAC,IAAI,CAAC,OAAO,EAAG;MACjB,IAAI,CAAC,OAAO,GAAG,WAAW,EAAE,CAAA;KAC/B;IAED,IAAK,CAAC,IAAI,CAAC,MAAM,EAAG;MAChB,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,aAAa,CAAC,CAAA;MACzC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;KACzC;IAED,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAA;IAE1C,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAA;IAEtD,OAAO,IAAI,CAAC,MAAM,CAAA;GACrB;EAGM,WAAW;;IACd,IAAI,IAAI,CAAC,MAAM;MAAE,MAAA,MAAA,IAAI,CAAC,MAAM,0CAAE,cAAc,EAAE,0CAAE,OAAO,CAAC,KAAK;;QACzD,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,EAAE,CAAA;QACb,MAAA,IAAI,CAAC,MAAM,0CAAE,WAAW,CAAC,KAAK,CAAC,CAAA;OAClC,CAAC,CAAC;IACH,IAAI,IAAI,CAAC,OAAO;MAAE,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;GACnD;EAEM,MAAM,WAAW;IACpB,OAAO,MAAM,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;GAExC;CAEJ;AAGM,MAAM,MAAM,GAAG,IAAI,SAAS,EAAE;;ACxDrC,MAAM,sBAAsB,GAAG,6KAA6K;;MCU/LA,qBAAmB;;;;;;;iBAQyB,GAAG;kBAKF,GAAG;sBAKY,eAAe,CAAC,KAAK;uBAU3D,IAAI;;;;;;EAOrC,MAAM,OAAO;;IAEX,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,WAAW,EAAE,CAAA;IACtC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,OAAO,GAAG,CAAA;GACX;;;;EAMD,MAAM,WAAW;;IAEf,MAAM,CAAC,WAAW,EAAE,CAAA;GACrB;;;;EAMD,MAAM,YAAY;IAChB,IAAI,CAAC,kBAAkB,EAAE,CAAA;GAC1B;EA2BD,cAAc;IACZ,IAAI,CAAC,kBAAkB,EAAE,CAAA;GAC1B;;;;;EAQO,kBAAkB;;IAExB,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,IAAI,eAAe,CAAC,KAAK,IAAI,eAAe,CAAC,KAAK,GAAG,eAAe,CAAC,IAAI,CAAA;IAC3G,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAE,IAAI,CAAC,UAAU,CAAI,CAAA;GACjD;EAID,kBAAkB;GAEjB;EAED,MAAM,kBAAkB;IACtB,MAAM,CAAC,UAAU,CAAE,IAAI,CAAC,EAAE,EAAE,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAE,CAAC;GACvE;EAED,MAAM,oBAAoB;IACxB,MAAM,CAAC,WAAW,EAAE,CAAA;GACrB;EAED,MAAM;IACJ,QACE,EAAC,IAAI,IAAC,KAAK,EAAE,EAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,GAAC,IAAI,EAAC,IAE7D,YAAM,IAAI,EAAC,QAAQ,GAAQ,EAE3B,eAAa,EAEb,YAAM,IAAI,EAAC,OAAO,GAAQ,CACrB,EACP;GACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["InputFileFromWebcam"],"sources":["src/utils/camera.ts","src/components/input-file-from-webcam/input-file-from-webcam.css?tag=input-file-from-webcam&encapsulation=shadow","src/components/input-file-from-webcam/input-file-from-webcam.tsx"],"sourcesContent":["import { createVideo, createCanvas, CameraDirection, initWebcamToVideo, renderToCanvas, takePicture } from \"./camera.service\";\n\n\n\ninterface SuperCamera {\n    initCamera(parentElement: HTMLElement, direction: CameraDirection, drawImageCb: Function): Promise<HTMLCanvasElement>,\n    takePicture(): Promise<Blob>,\n    resetCamera(): void,\n}\n\n\n\nexport class WebCamera implements SuperCamera {\n\n    private elVideo: HTMLVideoElement;\n    private stream: MediaStream;\n    private canvas: HTMLCanvasElement;\n\n\n    public async initCamera( parentElement: HTMLElement, direction: CameraDirection, drawImageCb: Function = null) {\n        \n        this.resetCamera();\n\n        if ( !this.elVideo ) {\n            this.elVideo = createVideo()\n        }\n\n        if ( !this.canvas ) {\n            this.canvas = createCanvas(parentElement)\n            parentElement.appendChild(this.canvas)\n        }\n        \n        initWebcamToVideo(this.elVideo, direction)\n\n        renderToCanvas(this.canvas, this.elVideo, drawImageCb)\n\n        return this.canvas\n    }\n\n\n    public resetCamera() {\n        if (this.stream) this.stream?.getVideoTracks()?.forEach(track => {\n            track?.stop()\n            this.stream?.removeTrack(track)\n        });\n        if (this.elVideo) this.elVideo.srcObject = null;\n    }\n\n    public async takePicture(): Promise<File> {\n        return await takePicture(this.canvas)\n\n    }\n\n}\n\n\nexport const camera = new WebCamera()\n",":host {\n  display: inline-block;\n  width: 100px;\n  filter: drop-shadow(2px 4px 6px black);\n  border: #5a5252 1px solid;\n  border-style: groove;\n}\n\n\nvideo {\n  display: none;\n}\n\ncanvas {\n  width: 100%;\n  height: 100%;\n}","import { Component, Host, h, Method, Listen, Prop, Event, EventEmitter, Element } from '@stencil/core';\nimport { camera } from '../../utils/camera';\nimport { CameraDirection } from '../../utils/camera.service';\n\n\n@Component({\n  tag: 'input-file-from-webcam',\n  styleUrl: 'input-file-from-webcam.css',\n  shadow: true,\n})\nexport class InputFileFromWebcam {\n\n\n  @Element() el: HTMLElement;\n\n  /**\n   * Width of the video element\n   */\n  @Prop({reflect: true, mutable: true}) width?: number = 460\n\n  /**\n   * height of the video element\n   */\n  @Prop({reflect: true, mutable: true}) height?: number = 460\n\n  /**\n   * FacingModel optiones following https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints/facingMode#value\n   */\n  @Prop({ mutable: true, reflect: true }) facingMode?: CameraDirection = CameraDirection.Front\n\n  /**\n   * you can pass a function and override the canvas.drawImage function so you\n   * can change the image adding filters or any kind of magin in your image\n   * \n   * you just need to crear a function with all canvas.-drawImage arguments\n   * \n   * here you have the list of vars you get: videoElement, left, top, imgSize, imgSize, 0,0, canvas.width, canvas.height\n   */\n  @Prop() drawImageCb?: Function = null\n\n  /**\n   * Take a picture\n   * @returns a blob with the image\n   */\n  @Method()\n  async takePic(): Promise<Blob> {\n    // show a prompt\n    const pic = await camera.takePicture()\n    this.pictureTaken.emit(pic);\n    return pic\n  }\n\n  /**\n   * Reset camera\n   */\n  @Method()\n  async resetCamera(): Promise<void> {\n    // show a prompt\n    camera.resetCamera()\n  }\n\n  /**\n   * Toogle webcam, for example in mobile show front or back camera\n   */\n  @Method()\n  async toggleCamera(): Promise<void>{\n    this.__toogleFacingMode()\n  }\n\n\n  /**\n   * Event emitted when the user takes a picture\n   */\n  @Event({\n    eventName: 'pictureTaken',\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  }) pictureTaken: EventEmitter<Blob>;\n\n\n  /**\n   * Event emitted when the user takes a picture\n   */\n  @Event({\n    eventName: 'facingModeChanged',\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  }) facingModeChanged: EventEmitter<CameraDirection>;\n\n\n\n  @Listen('click')\n  onClickHandler() {\n    this.__toogleFacingMode()\n  }\n\n \n\n  /**\n   * Toogle webcam, for example in mobile show front or back camera\n   * you can block this behaviour by setting the facingMode Property\n   */\n  private __toogleFacingMode() {\n    // only change if no facinMode property was set\n    this.facingMode = (this.facingMode != CameraDirection.Front) ? CameraDirection.Front : CameraDirection.Rear\n    this.facingModeChanged.emit( this.facingMode   )\n  }\n\n \n\n  componentWillMount() {\n   \n  }\n  \n  async componentDidRender() {\n    camera.initCamera( this.el, CameraDirection.Front, this.drawImageCb );\n  }\n\n  async disconnectedCallback() {\n    camera.resetCamera()\n  }\n\n  render() {\n    return (\n      <Host style={{height: this.height+\"px\", width: this.width+\"px\"}}>\n\n        <slot name='before'></slot>\n        \n        <slot></slot>\n\n        <slot name='after'></slot>\n      </Host>\n    );\n  }\n\n}\n"],"version":3}